import argparse
import os
from pathlib import Path
from typing import List
from translator import MarkdownTranslator
from github import Github
from git import Repo
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    parser = argparse.ArgumentParser(description='Automated Markdown Translation Bot')
    parser.add_argument("--source-dir", default="trees", help="Directory containing Chinese markdown files")
    parser.add_argument("--target-dir", default="trees_en", help="Directory for English translations")
    parser.add_argument("--pr-reviewers", default="", help="Comma-separated GitHub usernames for review")
    args = parser.parse_args()

    # Initialize components
    translator = MarkdownTranslator(os.getenv("API_KEY"))
    repo = Repo(".")
    
    # Get changed files with absolute paths
    changed_files = get_changed_files(args.source_dir)
    if not changed_files:
        logger.info("No changed Markdown files detected")
        return

    # Translate files (convert to relative paths for processing)
    rel_files = [str(Path(f).relative_to(args.source_dir)) for f in changed_files]
    stats = translator.batch_translate(
        input_dir=args.source_dir,
        output_dir=args.target_dir,
        specific_files=rel_files
    )
    
    if stats['success'] == 0:
        raise Exception("No files were successfully translated")

    # Git operations
    configure_git(repo)
    commit_and_push(repo, stats['success'])

    # PR Management
    create_pull_request(changed_files, stats['success'], args.pr_reviewers)

def get_changed_files(source_dir: str) -> List[str]:
    """Identify modified/added markdown files with full paths"""
    repo = Repo(".")
    changed = []
    source_path = Path(source_dir).absolute()
    
    for diff in repo.index.diff(None):
        if diff.change_type in ('A', 'M') and diff.a_path.endswith('.md'):
            abs_path = Path(diff.a_path).absolute()
            try:
                if str(abs_path.relative_to(source_path)).startswith('..'):
                    continue  # Skip files outside source_dir
                changed.append(str(abs_path))
            except ValueError:
                continue  # File not in source_dir
    
    return changed

def configure_git(repo: Repo):
    """Set git identity for automated commits"""
    repo.git.config("user.name", "Translation Bot")
    repo.git.config("user.email", "bot@community-blog")

def commit_and_push(repo: Repo, success_count: int):
    """Commit changes and push to dedicated branch"""
    repo.git.add(A=True)
    repo.index.commit(f"feat(translation): update {success_count} files")
    
    # Force push to translation branch
    repo.git.push("origin", "HEAD:content-translation", force=True)

def create_pull_request(changed_files: List[str], success_count: int, reviewers: str):
    """Create or update translation PR"""
    g = Github(os.getenv("GITHUB_TOKEN"))
    repo = g.get_repo(os.getenv("GITHUB_REPOSITORY"))
    
    # Check for existing PR
    existing_prs = repo.get_pulls(state='open', head='content-translation')
    if existing_prs.totalCount > 0:
        pr = existing_prs[0]
        logger.info(f"Updating existing PR: {pr.html_url}")
    else:
        # Create new PR
        pr = repo.create_pull(
            title="feat(translation): automated content updates",
            body=generate_pr_body(changed_files, success_count),
            head="content-translation",
            base="main"
        )
        logger.info(f"Created new PR: {pr.html_url}")
    
    # Manage reviewers
    if reviewers:
        current_reviewers = {r.login for r in pr.get_review_requests()[0]}
        new_reviewers = [r.strip() for r in reviewers.split(",") if r.strip() not in current_reviewers]
        if new_reviewers:
            pr.create_review_request(reviewers=new_reviewers)

def generate_pr_body(changed_files: List[str], success_count: int) -> str:
    """Generate detailed PR description"""
    sample_files = "\n".join(f"- {Path(f).relative_to('trees')}" for f in changed_files[:5])
    if len(changed_files) > 5:
        sample_files += f"\n- ...(+{len(changed_files)-5} more)"
    
    return f"""
## Translation Summary

âœ… Successfully translated {success_count} files

### Changed Files:
{sample_files}

### Verification Checklist:
1. [ ] Markdown formatting preserved
2. [ ] Code blocks unchanged
3. [ ] Technical terms accurate

> Automatically generated by GitHub Actions
"""

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.error(f"Fatal error: {str(e)}")
        raise